#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> datas = {
};
vector<int> datas2 = {
    7168, 1034, 5642, 3595, 2063, 6674, 8726, 5144, 5663, 9251, 43, 564, 53, 5177, 5696, 73, 8271, 4689, 88, 3164, 3682, 3170, 7784, 4713, 1132, 7277, 8302, 5751, 7294, 1667, 9354, 8331, 3212, 2225, 4274, 3251, 7352, 1722, 5836, 3276, 5850, 3291, 8412, 1762, 3814, 4848, 6389, 4341, 4864, 258, 6403, 3844, 3337, 5908, 5403, 7456, 7968, 7459, 5412, 803, 6962, 3378, 7988, 2875, 8515, 2899, 9556, 345, 4444, 5981, 7521, 5477, 9062, 7018, 9583, 3444, 4989, 6019, 3971, 1930, 7569, 5014, 9114, 6043, 4005, 947, 8118, 9654, 2497, 1477, 7126, 4060, 4064, 6114, 9700, 7149, 5616, 6640, 2047};

struct node
{
    int key;
    node *leftChild;
    node *rightChild;
    node(int key) : key(key), rightChild(nullptr), leftChild(nullptr) {}
};

struct BST
{
    node *root;

    BST() : root(nullptr) {}
    BST(vector<int> &datas)
    {
        int size = datas.size();
        sort(datas.begin(), datas.end());
        root = BST_in(datas, 0, size - 1);
    }

    node *search(int key);
    void inOrderTravel()
    {
        cout << endl;
        inOrder(root);
        cout << endl;
    }

    void insert(int key);
    void delNode(int key);

private:
    void inOrder(node *nownode);
    node *BST_in(const vector<int> &datas, int l, int r);
    void insert_in(node *&nownode, int key);
    void delNode_in(node *&nownode, int key);
};

void BST::delNode(int key)
{
    delNode_in(root, key);
}

// 涉及修改,要用引用
void BST::delNode_in(node *&nownode, int key)
{
    if (nownode == nullptr)
    {
        return; // 未查询到,不执行操作
    }

    if (nownode->key < key)
    {
        delNode_in(nownode->rightChild, key);
    }
    else if (nownode->key > key)
    {
        delNode_in(nownode->leftChild, key);
    }
    else // 查询到目标节点
    {
        // 有两个节点的情况
        if (nownode->leftChild != nullptr && nownode->rightChild != nullptr)
        {
            node *newroot = nownode->rightChild;
            while (newroot->leftChild != nullptr)
            {
                newroot = newroot->leftChild; // 找到中根后继
            }

            nownode->key = newroot->key;
            delNode_in(newroot, newroot->key);
        }
        else // 其它情况
        {
            node *pre = nownode;
            nownode = pre->rightChild; // 因为是引用,可以直接修改
            if (pre->leftChild != nullptr)
            {
                nownode = pre->leftChild;
            }
            delete pre;
        }
    }
}

node *BST::BST_in(const vector<int> &datas, int l, int r)
{
    if (l > r)
    {
        return nullptr;
    }
    int mid = (l + r) / 2;
    node *newnode = new node(datas[mid]);
    newnode->leftChild = BST_in(datas, l, mid - 1);
    newnode->rightChild = BST_in(datas, mid + 1, r);
    return newnode;
}

node *BST::search(int key)
{
    node *p = root;
    while (p != nullptr)
    {
        if (p->key > key)
        {
            p = p->leftChild;
        }
        else if (p->key < key)
        {
            p = p->rightChild;
        }
        else
        {
            return p;
        }
    }
    return nullptr; // 未查询到
}

void BST::inOrder(node *nownode)
{
    if (nownode == nullptr)
    {
        return;
    }

    inOrder(nownode->leftChild);
    cout << nownode->key << " ";
    inOrder(nownode->rightChild);
}

void BST::insert(int key)
{
    insert_in(root, key);
}

void BST::insert_in(node *&nownode, int key)
{
    if (nownode == nullptr)
    {
        nownode = new node(key);
    }
    else if (nownode->key < key)
    {
        insert_in(nownode->rightChild, key);
    }
    else if (nownode->key > key)
    {
        insert_in(nownode->leftChild, key);
    }
}

int main()
{
    vector<int> datas3 = {1, 3, 4, 5, 7, 8};
    BST bst(datas3);

    int temp;
    bst.inOrderTravel();
    while (1)
    {
        cin >> temp;
        bst.delNode(temp);
        bst.inOrderTravel();
    }
    return 0;
}